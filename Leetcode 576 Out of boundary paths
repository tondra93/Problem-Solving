/*
Initialization:

Initialize a 2D vector dp of size m x n to represent the number of ways to reach each cell.
Set the starting cell (x, y) to 1, as there is one way to reach it initially.
Counting Paths:

Use a nested loop to iterate over the number of moves from 1 to N.
For each cell (i, j) in the grid:
If (i, j) is on the boundary, increment the count by the value of dp[i][j]. This accounts for paths going out of the grid.
Update temp[i][j] based on the sum of the ways to reach the adjacent cells in the previous state (dp).
Use modulo M to avoid integer overflow.
Updating State:

Update the dp vector with the values from the temp vector for the next iteration.
Return Result:

Return the final count, representing the total number of paths that lead out of the grid after N moves.

*/
class Solution {
public:
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        const int M=100000000+7;
        vector<vector<int>> dp(m,vector<int>(n,0));
        dp[startRow][startColumn]=1;
        int ans=0;
        for(int moves=1;moves<=maxMove;moves++){
            vector<vector<int>> temp(m,vector<int>(n,0));
            for(int i=0;i<m;i++){
                for(int j=0;j<n;j++){
                    if(i==m-1)ans=(ans+dp[i][j])%M;
                    if(j==n-1)ans=(ans+dp[i][j])%M;
                    if(i==0)ans=(ans+dp[i][j])%M;
                    if(j==0)ans=(ans+dp[i][j])%M;
                    temp[i][j] = (
                        ((i > 0 ? dp[i - 1][j] : 0) + (i < m - 1 ? dp[i + 1][j] : 0)) % M +
                        ((j > 0 ? dp[i][j - 1] : 0) + (j < n - 1 ? dp[i][j + 1] : 0)) % M
                    ) % M;
                        
                }
            }
            dp=temp;
        }
        return ans;
    }
};
